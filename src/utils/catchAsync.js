import Swal from 'sweetalert2'
import { useErrorStore } from '../stores/errorStore'

// ÈåØË™§È†êË®≠ËôïÁêÜ
export const errorFunction = (errors, message) => {
  console.log(errors.response)
  let formatText = null

  // Áõ¥Êé•Êìç‰Ωú
  if (errors === null) {
    Swal.fire({
      icon: 'error',
      title: message || 'üî• Ë´ãÊ±ÇÂ§±Êïó',
      width: '400px',
      timer: 2000,
      showConfirmButton: false,
    })
  }

  // // Ëã•ÂæåÁ´ØÊúâÈüøÊáâ
  if (errors.response) {
    // format html È°ØÁ§∫Â≠ó‰∏≤
    if (errors.response.data.errors) {
      formatText = errors.response.data.errors.reduce((init, cur, curIndex) => {
        const str = `<li>‚ùå ${cur}</li>`
        if (errors.response.data.errors.length === curIndex - 1) return (init += `${str}</ul>`)
        return (init += str)
      }, '<ul>')
    }

    // ÂâçÁ´Ø log
    Swal.fire({
      icon: 'error',
      title: message || errors.response.data.message || 'üî• Ë´ãÊ±ÇÂ§±Êïó',
      html: formatText,
      width: '400px',
      timer: 2500,
      showConfirmButton: false,
    })

    // log
    return console.warn(
      `%cüî• ${errors.response.status} Ë´ãÊ±ÇÂ§±Êïó:`,
      'background: #F2B33D; border-radius: 4px; color: #fff; padding: .3rem 1rem;',
      `${errors.config.baseURL}/${errors.config.url}`,
      errors.response.data.errors,
    )
  }
  // Á∂≤Ë∑ØÂ§±Êïó
  if (errors.message === 'Network Error') {
    Swal.fire({
      icon: 'error',
      title: 'üî• Á∂≤Ë∑ØÈÄ£Á∑öÂ§±Êïó:',
      text: errors.message,
      width: '400px',
      timer: 1500,
      showConfirmButton: false,
    })

    return console.warn(
      '%cüî• Á∂≤Ë∑ØÈÄ£Á∑öÂ§±Êïó:',
      'background: #F2B33D; border-radius: 4px; color: #fff; padding: .3rem 1rem;',
      `${errors.config.baseURL}/${errors.config.url}`,
      errors.message,
    )
  }

  console.warn(
    '%cüî• catchAsync ÁôºÁîüÈåØË™§:',
    'background: #F2B33D; border-radius: 4px; color: #fff; padding: .3rem 1rem;',
    errors || '',
  )
}

const catchAsync =
  (func, errorFunc) =>
  async (...args) => {
    try {
      // ÊàêÂäüËôïÁêÜ
      return await func(...args)
    } catch (errors) {
      // const errorStore = useErrorStore()
      // ÈåØË™§ËôïÁêÜ: ÁµÑ‰ª∂ÂÖßÁöÑÈåØË™§ËôïÁêÜ
      // errorStore.errorActions[errors.status].push(() => func(...args))

      // errorStore.errorActions[errors.response.status].push(() => func(...args))
      // console.log(errorStore.errorActions)

      if (errorFunc) return errorFunc(errors)
      return errorFunction(errors)
    }
  }

export default catchAsync
